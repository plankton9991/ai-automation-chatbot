import google.generativeai as genai
import csv
import os
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
# –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ –∑ –≤–∞—à–æ–≥–æ Vercel –¥–æ–º–µ–Ω—É
CORS(app, resources={
    r"/*": {
        "origins": [
            "http://localhost:5173",
            "https://*.vercel.app",  # –î–æ–∑–≤–æ–ª—è—î –≤—Å—ñ Vercel –¥–æ–º–µ–Ω–∏
            "https://your-project.vercel.app"  # –í–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–æ–º–µ–Ω
        ]
    }
})

# ============ –°–ï–ö–¶–Ü–Ø 1: –§—É–Ω–∫—Ü—ñ—ó ============

def load_knowledge_base(file_path: str) -> str:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –±–∞–∑—É –∑–Ω–∞–Ω—å –∑ CSV-—Ñ–∞–π–ª—É"""
    knowledge_base = []
    try:
        with open(file_path, mode='r', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile)
            next(reader)
            for row in reader:
                if len(row) == 2:
                    question, answer = row
                    knowledge_base.append(f"–ü: {question.strip()}\n–í: {answer.strip()}")
        if not knowledge_base:
            return "–ü–æ–º–∏–ª–∫–∞: –ë–∞–∑–∞ –∑–Ω–∞–Ω—å –ø–æ—Ä–æ–∂–Ω—è."
        return "\n\n".join(knowledge_base)
    except FileNotFoundError:
        return f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}"

def get_gemini_response(user_question: str, knowledge_base: str, business_name: str) -> str:
    """–û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini API"""
    prompt_template = f"""### –ü–ï–†–°–û–ù–ê ###
–¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω—ñ—ó {business_name}, —è–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—ñ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±—ñ–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—ñ–≤. 
–¢–∏ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π, —Ç–∞ –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏.

### –¢–í–û–Ø –†–û–õ–¨ ###
1. **–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –±–∞–∑—ñ –∑–Ω–∞–Ω—å**: –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è–π –±–∞–∑—É –∑–Ω–∞–Ω—å –Ω–∏–∂—á–µ. –Ø–∫—â–æ —Ç–∞–º —î —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ó—ó —è–∫ –æ—Å–Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

2. **–î–æ–¥–∞–≤–∞–π —Ü—ñ–Ω–Ω—ñ—Å—Ç—å**: –ú–æ–∂–µ—à —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏, –ø–æ—Ä–∞–¥–∞–º–∏ —â–æ–¥–æ:
   - AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
   - –ü–µ—Ä–µ–≤–∞–≥ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è AI –≤ –±—ñ–∑–Ω–µ—Å
   - –ö—Ä–∞—â–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ —É —Å—Ñ–µ—Ä—ñ
   - –¢—Ä–µ–Ω–¥—ñ–≤ —É –≥–∞–ª—É–∑—ñ
   - –ó–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ—Ä–∞–¥ –ø—Ä–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –ø—Ä–æ—Ü–µ—Å—ñ–≤

3. **–ü—Ä–∏—Ä–æ–¥–Ω–∞ —Ä–æ–∑–º–æ–≤–∞**: –í–µ–¥–∏ –¥—ñ–∞–ª–æ–≥ –ø—Ä–∏—Ä–æ–¥–Ω–æ. –ú–æ–∂–µ—à:
   - –°—Ç–∞–≤–∏—Ç–∏ —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è
   - –ü—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è
   - –î–∞–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ä–æ–∑–º–æ–≤–∏
   - –ü–æ—è—Å–Ω—é–≤–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é

4. **–û–±–º–µ–∂–µ–Ω–Ω—è**: 
   - –ù–ï –≤–∏–≥–∞–¥—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü—ñ–Ω–∏, –¥–∞—Ç–∏ –∞–±–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω—ñ—ó, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ –∑–Ω–∞–Ω—å
   - –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é (–∫–æ–Ω—Ç–∞–∫—Ç–∏, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —É–º–æ–≤–∏, —Ç–µ—Ä–º—ñ–Ω–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤), —è–∫–æ—ó –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ - –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   - –ù–µ –≤–∏–¥–∞–≤–∞–π —Å–µ–±–µ –∑–∞ —ñ–Ω—à—É –∫–æ–º–ø–∞–Ω—ñ—é —á–∏ —Å–µ—Ä–≤—ñ—Å

5. **–°—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è**:
   - –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º
   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ –ø–æ–º—ñ—Ä–Ω–æ (1-2 –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) –¥–ª—è –¥—Ä—É–∂–Ω—å–æ–≥–æ —Ç–æ–Ω—É
   - –°—Ç—Ä—É–∫—Ç—É—Ä—É–π –≤–µ–ª–∏–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è
   - –ó–∞–≤–µ—Ä—à—É–π –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é –¥–æ–ø–æ–º–æ–≥—Ç–∏ –¥–∞–ª—ñ

### –ë–ê–ó–ê –ó–ù–ê–ù–¨ –ö–û–ú–ü–ê–ù–Ü–á ###
{knowledge_base}

### –ó–ê–ü–ò–¢–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ###
{user_question}

### –¢–í–û–Ø –í–Ü–î–ü–û–í–Ü–î–¨ ###
(–î–∞–π –∫–æ—Ä–∏—Å–Ω—É, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —Å–ø–∏—Ä–∞—é—á–∏—Å—å –Ω–∞ –±–∞–∑—É –∑–Ω–∞–Ω—å —Ç–∞ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –ø—Ä–æ AI —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é)"""

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à—É –º–æ–¥–µ–ª—å Gemini 2.0 Flash
        model = genai.GenerativeModel(
            'gemini-2.5-flash',
            generation_config={
                'temperature': 0.7,  # –ë–∞–ª–∞–Ω—Å –º—ñ–∂ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—é —Ç–∞ —Ç–æ—á–Ω—ñ—Å—Ç—é
                'top_p': 0.95,
                'top_k': 40,
                'max_output_tokens': 1024,
            }
        )
        response = model.generate_content(prompt_template)
        return response.text
    except Exception as e:
        return f"–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É. –ü–æ–º–∏–ª–∫–∞: {e}"

# ============ –°–ï–ö–¶–Ü–Ø 2: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ============

# –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ API –∫–ª—é—á –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_KEY = os.getenv('GEMINI_API_KEY')
if not API_KEY:
    print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ GEMINI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó –∫–æ–º–∞–Ω–¥–æ—é: set GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á")
    exit()

CSV_FILE_PATH = 'faq.csv'
BUSINESS_NAME = "RSIVE INTELLIGENCE"

# –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Gemini API
try:
    genai.configure(api_key=API_KEY)
    print("‚úÖ Gemini API –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó API: {e}")
    exit()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–∞–∑—É –∑–Ω–∞–Ω—å –û–î–ò–ù –†–ê–ó –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
knowledge_base = load_knowledge_base(CSV_FILE_PATH)
if "–ü–æ–º–∏–ª–∫–∞:" in knowledge_base:
    print(knowledge_base)
    exit()
else:
    print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ ({len(knowledge_base.split('–ü:')) - 1} –∑–∞–ø–∏—Å—ñ–≤)")

# ============ –°–ï–ö–¶–Ü–Ø 3: Flask –¥–æ–¥–∞—Ç–æ–∫ ============

app = Flask(__name__)
CORS(app)  # –î–æ–∑–≤–æ–ª—è—î –∑–∞–ø–∏—Ç–∏ –∑ React

@app.route('/chat', methods=['POST'])
def chat():
    """Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Å–∞–π—Ç—É"""
    try:
        data = request.get_json()
        user_message = data.get('message', '')
        
        if not user_message:
            return jsonify({'error': '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î'}), 400
        
        print(f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {user_message[:50]}...")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini
        response = get_gemini_response(user_message, knowledge_base, BUSINESS_NAME)
        
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ({len(response)} —Å–∏–º–≤–æ–ª—ñ–≤)")
        
        return jsonify({'response': response})
    
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø—Ä–∞—Ü—é—î —Å–µ—Ä–≤–µ—Ä"""
    return jsonify({
        'status': 'ok', 
        'business': BUSINESS_NAME,
        'model': 'gemini-2.0-flash-exp'
    })

# ============ –°–ï–ö–¶–Ü–Ø 4: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ============

if __name__ == "__main__":
    print("\n" + "="*60)
    print(f"ü§ñ AI-–ß–∞—Ç–±–æ—Ç '{BUSINESS_NAME}' –∑–∞–ø—É—â–µ–Ω–æ!")
    print(f"üì° API: http://localhost:5000/chat")
    print(f"üè• Health check: http://localhost:5000/health")
    print(f"üß† –ú–æ–¥–µ–ª—å: Gemini 2.0 Flash (Experimental)")
    print(f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω—å: {CSV_FILE_PATH}")
    print("="*60 + "\n")
    app.run(host='0.0.0.0', port=5000, debug=True)